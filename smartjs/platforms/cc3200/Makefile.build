# -*- mode: makefile -*-
#
# Smart.js for CC3200
#
# This file is executed inside Docker build container.
# It can be used without container too if SDK_PATH and V7_PATH are configured.
MAKEFLAGS += --warn-undefined-variables

APP ?= smartjs
APP_PLATFORM = CC3200

SDK_PATH ?= /cc3200-sdk
REPO_PATH ?= ../../..
V7_PATH ?= $(REPO_PATH)/v7
SMARTJS_PATH ?= $(REPO_PATH)/smartjs
COMMON_PATH ?= $(REPO_PATH)/common
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
MONGOOSE_PATH ?= $(REPO_PATH)/mongoose
BUILD_DIR ?= ./.build
FW_DIR = ./firmware
FW_FS_SIZE = 65536
SMARTJS_SRC ?= $(SMARTJS_PATH)/src
COMMON_FS_PATH ?= $(SMARTJS_SRC)/fs
SJSJS_PATH ?= $(SMARTJS_SRC)/js
FS_DIR = fs
FS_BUILD_DIR = $(BUILD_DIR)/fs
GENERATED_SOURCES = $(V7_PATH)/v7.c $(V7_PATH)/v7.h

# For FW_VERSION, COMMON_V7_FEATURES, MG_FEATURES_TINY
include $(REPO_PATH)/smartjs/common.mk

JS_SRCS := $(SJSJS_PATH)/gpio.js
JSBIN_EXT := js
JS_EXT := js

IPATH = src $(BUILD_DIR) $(REPO_PATH)
VPATH = src $(BUILD_DIR)

V7_FEATURES = $(COMMON_V7_FEATURES) \
              -DV7_BUILD_PROFILE=1 \
              -DV7_DISABLE_AST_TAG_NAMES \
              -DV7_ENABLE_COMPACTING_GC \
              -DDISABLE_MD5 \
              -DV7_ENABLE__Math \
              -DV7_ENABLE__Math__random \
              -DV7_ENABLE__Memory__stats \
              -DV7_ENABLE_FILE \
              -DV7_ENABLE__File__list=1

MONGOOSE_FEATURES = $(MG_FEATURES_TINY) -DMG_LOCALS \
                    -DMG_DISABLE_FILESYSTEM

V7_MEMORY_FLAGS = -DMBUF_SIZE_MULTIPLIER=1 \
                  -DV7_STACK_SIZE=8192-64 \
                  -DV7_DISABLE_INTERPRETER_STACK_CHECK \
                  -DFS_MAX_OPEN_FILES=5

SDK_FLAGS = -DTARGET_IS_CC3200 -DUSE_FREERTOS -DSL_PLATFORM_MULTI_THREADED

APP_ELF = $(FW_DIR)/$(APP).axf
APP_BIN = $(FW_DIR)/$(APP).bin
FS_IMG = $(FW_DIR)/fs.img
SYS_CONFIG_C = $(BUILD_DIR)/sys_config.c
BUILD_INFO_C = $(BUILD_DIR)/build_info.c
BUILD_INFO_O = $(BUILD_DIR)/build_info.o
BUILD_INFO_JSON = $(BUILD_DIR)/build_info.json

.PHONY: all clean flash

SJ_SRCS = sj_gpio_js.c \
          sj_i2c_js.c \
          sj_prompt.c \
          sj_http.c \
          sj_mongoose.c sj_mongoose_http_client.c sj_mongoose_ws_client.c \
          sj_mqtt.c \
          sj_timers.c sj_timers_mongoose.c \
          sj_v7_ext.c \
          sj_wifi_js.c \
          device_config.c sj_config.c $(notdir $(SYS_CONFIG_C)) \
          v7.c sj_utils.c
VPATH += $(SMARTJS_PATH)/src $(V7_PATH)

SPIFFS_SRCS = $(notdir $(wildcard $(SPIFFS_PATH)/*.c))
IPATH += $(SPIFFS_PATH)
VPATH += $(SPIFFS_PATH)

FREERTOS_SRCS = timers.c list.c queue.c tasks.c port.c heap_3.c osi_freertos.c
DRIVER_SRCS = cpu.c i2c.c interrupt.c pin.c prcm.c spi.c uart.c udma.c utils.c
SL_SRCS = socket.c wlan.c driver.c device.c netapp.c netcfg.c network_common.c \
          cc_pal.c fs.c
SDK_SRCS = $(FREERTOS_SRCS) $(DRIVER_SRCS) $(SL_SRCS)
IPATH += $(SDK_PATH) $(SDK_PATH)/inc $(SDK_PATH)/driverlib $(SDK_PATH)/oslib \
         $(SDK_PATH)/simplelink $(SDK_PATH)/simplelink/include \
         $(SDK_PATH)/simplelink_extlib/provisioninglib \
         $(SDK_PATH)/third_party/FreeRTOS/source/include \
         $(SDK_PATH)/third_party/FreeRTOS/source/portable/GCC/ARM_CM4
VPATH += $(SDK_PATH)/driverlib $(SDK_PATH)/oslib $(SDK_PATH)/simplelink \
         $(SDK_PATH)/example/common \
         $(SDK_PATH)/simplelink/source $(SDK_PATH)/third_party/FreeRTOS/source \
         $(SDK_PATH)/third_party/FreeRTOS/source/portable/GCC/ARM_CM4 \
         $(SDK_PATH)/third_party/FreeRTOS/source/portable/MemMang

APP_SRCS = $(notdir $(wildcard src/*.c)) mongoose.c \
           $(SJ_SRCS) $(SPIFFS_SRCS) $(SDK_SRCS)

.DEFAULT_GOAL := all

clean:
	@rm -rf $(BUILD_DIR) $(wildcard *~)
	@rm -rf $(FW_DIR) $(wildcard *~)

$(BUILD_DIR) $(FW_DIR) $(FS_BUILD_DIR):
	$(vecho) "MKDIR $@"
	@mkdir -p $@

FW_PARTS = sys_mcuimg.bin:src=$(notdir $(APP_BIN)) \
           fs.img:src=$(notdir $(FS_IMG))
include $(REPO_PATH)/common/scripts/fw_meta.mk

APP_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(APP_SRCS)))
VPATH += $(MONGOOSE_PATH)

all: $(BUILD_DIR) $(FS_BUILD_DIR) $(SYS_CONFIG_C) $(BUILD_INFO_C) $(FW_ZIP)

$(FW_MANIFEST): $(APP_ELF) $(APP_BIN) $(FS_IMG)

$(APP_ELF): $(FW_DIR) $(APP_OBJS) $(BUILD_INFO_O)

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(APP_OBJS)

$(BUILD_INFO_O): $(BUILD_INFO_C)

include $(REPO_PATH)/common/scripts/build_info.mk
include $(REPO_PATH)/smartjs/src/sys_config.mk

$(BUILD_DIR)/mongoose.o: CFLAGS += -DEXCLUDE_COMMON
$(BUILD_DIR)/v7.o: $(GENERATED_SOURCES)

# Bulk of the work is done by SDK-provided makefile.

PROG = $(APP)
OBJDIR = $(BUILD_DIR)
BINDIR = $(FW_DIR)
CFLAGSgcc = -Os -Wall -Werror -DNDEBUG -DCS_NDEBUG \
            -I$(REPO_PATH) \
            $(SDK_FLAGS) $(V7_FEATURES) $(V7_MEMORY_FLAGS) \
            -DFW_ARCHITECTURE=\"$(APP_PLATFORM)\" \
            -DCS_PLATFORM=4 -DCC3200_FS_SLFS -DCC3200_FS_SPIFFS \
            $(MONGOOSE_FEATURES) $(CFLAGS_EXTRA)
LDFLAGSgcc =
LDFLAGSgcc_$(PROG) =
SCATTERgcc_$(PROG) = $(APP).ld
LNK_SCP = $(APP).ld
ENTRY_$(PROG) = ResetISR  # From startup_gcc.c
VERBOSE = $(V)
TARGET_ARCH =
ROOT =
FPU =
include $(SDK_PATH)/tools/gcc_scripts/makedefs


$(FS_IMG): $(wildcard $(COMMON_FS_PATH)/*) $(JS_SRCS) $(wildcard $(FS_DIR)/*)
	@$(foreach js,$^, \
	  echo "  CP    $(js) -> $(FS_BUILD_DIR)"; \
	  cp $(js) $(FS_BUILD_DIR);)
	@echo "  MKFS  $@"
	@/usr/local/bin/mkspiffs $(FW_FS_SIZE) $(FS_BUILD_DIR) > $@

$(V7_PATH)/v7.c $(V7_PATH)/v7.h:
	make -C $(V7_PATH) v7.c v7.h

# Disable certain warnings on SDK sources, we have no control over them anyway.
# We aloc force-include platform.h which resolves some symbol conflicts
# between system includes and simplelink.h

SDK_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(SDK_SRCS)))
$(SDK_OBJS): CFLAGS += -include common/platform.h -Wno-missing-braces -Wno-strict-aliasing -Wno-parentheses -Wno-unused-variable -Wno-builtin-macro-redefined
$(BUILD_DIR)/cc_pal.o: CFLAGS += -Wno-error
