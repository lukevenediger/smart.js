# -*- mode: makefile -*-
# This file is executed inside Docker build container.
# It can be used without container too if SDK_PATH and V7_PATH are configured.

SDK_PATH ?= /cc3200-sdk
REPO_PATH ?= ../../..
V7_PATH ?= $(REPO_PATH)/v7
SMARTJS_PATH ?= $(REPO_PATH)/smartjs
COMMON_PATH ?= $(REPO_PATH)/common
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
MONGOOSE_PATH ?= $(REPO_PATH)/mongoose
BUILD_DIR ?= ./build
FW_DIR = firmware
FW_FS_SIZE = 65536
SMARTJS_SRC ?= $(SMARTJS_PATH)/src
COMMON_FS_PATH ?= $(SMARTJS_SRC)/fs
SJSJS_PATH ?= $(SMARTJS_SRC)/js
FS_DIR = fs
FS_BUILD_DIR = $(OBJDIR)/fs
GENERATED_SOURCES = $(V7_PATH)/v7.c $(V7_PATH)/v7.h
PLATFORM = CC3200

BINDIR = ${FW_DIR}
OBJDIR = ${BUILD_DIR}

# For FW_VERSION, COMMON_V7_FEATURES, MG_FEATURES_TINY
include $(REPO_PATH)/smartjs/common.mk

include ${SDK_PATH}/tools/gcc_scripts/makedefs

.PHONY: all clean flash

PROG = smartjs

JS_SRCS :=
JSBIN_EXT := js
JS_EXT := js

IPATH = . ${OBJDIR} ${SDK_PATH} \
        ${SDK_PATH}/inc \
        ${SDK_PATH}/driverlib \
        ${SDK_PATH}/oslib \
        ${SDK_PATH}/simplelink \
        ${SDK_PATH}/simplelink/include \
        ${SDK_PATH}/third_party/FreeRTOS/source/include \
        ${SDK_PATH}/third_party/FreeRTOS/source/portable/GCC/ARM_CM4 \
        ${SMARTJS_PATH}/src \
        ${SPIFFS_PATH} \
        ${V7_PATH} \
        ${REPO_PATH}

VPATH = ${SDK_PATH}/driverlib \
        ${SDK_PATH}/oslib \
        ${SDK_PATH}/simplelink \
        ${SDK_PATH}/simplelink/source \
        ${SDK_PATH}/third_party/FreeRTOS/source \
        ${SDK_PATH}/third_party/FreeRTOS/source/portable/GCC/ARM_CM4 \
        ${SDK_PATH}/third_party/FreeRTOS/source/portable/MemMang \
        ${SMARTJS_PATH}/src \
        ${COMMON_PATH}/platforms/cc3200 \
        ${SPIFFS_PATH} \
        ${V7_PATH} \
        ${MONGOOSE_PATH}

V7_FEATURES = $(COMMON_V7_FEATURES) \
              -DV7_BUILD_PROFILE=1 \
              -DV7_DISABLE_AST_TAG_NAMES \
              -DV7_ENABLE_COMPACTING_GC \
              -DDISABLE_MD5 \
              -DMG_NO_BSD_SOCKETS \
              -DV7_ENABLE__Math \
              -DV7_ENABLE__Math__random \
              -DV7_ENABLE__Memory__stats \
              -DV7_ENABLE_FILE \
              -DV7_ENABLE__File__list=1

MONGOOSE_FEATURES = $(MG_FEATURES_TINY) \
                    -DMG_DISABLE_FILESYSTEM \
                    -DMG_CC3200

#-DMG_ENABLE_DEBUG

# -DV7_TEMP_OFF
#-DV7_ENABLE_FILE -DV7_ESP_GDB_SERVER \
#-DCS_ENABLE_SPIFFS \
#-DV7_ESP_FLASH_ACCESS_EMUL

V7_MEMORY_FLAGS = -DMBUF_SIZE_MULTIPLIER=1 \
                  -DV7_STACK_SIZE=8192-64 \
                  -DV7_DISABLE_INTERPRETER_STACK_CHECK \
                  -DFS_MAX_OPEN_FILES=5

SDK_FLAGS = -DTARGET_IS_CC3200 -DUSE_FREERTOS -DSL_PLATFORM_MULTI_THREADED

DISABLED_SDK_WARNINGS = -Wno-missing-braces -Wno-strict-aliasing -Wno-parentheses -Wno-unused-variable

CFLAGS += -Os -Wall -Werror -DNDEBUG -DCS_NDEBUG \
          -I$(REPO_PATH) \
          $(SDK_FLAGS) ${V7_FEATURES} ${V7_MEMORY_FLAGS} \
          -DFW_ARCHITECTURE=\"$(PLATFORM)\" \
          -DCS_PLATFORM=4 -DCC3200_ENABLE_SPIFFS \
          ${MONGOOSE_FEATURES} ${CFLAGS_EXTRA}
# CFLAGS += -DCC3200_FS_DEBUG

FW_ELF = ${FW_DIR}/${PROG}.axf
FW_BIN = ${FW_DIR}/${PROG}.bin
FS_IMG = ${FW_DIR}/fs.img
FW_MANIFEST = ${FW_DIR}/manifest.json
FW_ZIP = ${FW_DIR}/firmware.zip
SYS_CONFIG_C = ${OBJDIR}/sys_config.c
BUILD_INFO_C = ${OBJDIR}/build_info.c
BUILD_INFO_JSON = ${OBJDIR}/build_info.json

.PHONY: all clean flash

all: ${OBJDIR} ${SYS_CONFIG_C} ${FW_DIR} ${FW_ZIP}

clean:
	@rm -rf ${OBJDIR} ${wildcard *~}
	@rm -rf ${FW_DIR} ${wildcard *~}

${OBJDIR}:
	@echo "  MKDIR $@"
	@mkdir -p ${OBJDIR} ${FS_BUILD_DIR}

${FW_DIR}:
	@echo "  MKDIR $@"
	@mkdir -p ${FW_DIR}

${FW_ZIP}: ${FW_ELF} ${FW_BIN} ${FS_IMG}
	@echo "    Code size: $(shell ls -l ${FW_BIN} | awk '{print $$5}')"
	@echo "  GEN   ${FW_MANIFEST}"
	@$(COMMON_PATH)/tools/fw_meta.py create_manifest \
		--name=smartjs --platform=$(PLATFORM) \
		--build_info=$(BUILD_INFO_JSON) \
		--output=$(FW_MANIFEST) \
		--src_dir=$(FW_DIR) \
		sys_mcuimg.bin:src=$(notdir $(FW_BIN)) \
		fs.img:src=$(notdir $(FS_IMG))
	@echo "  ZIP   $@"
	@$(COMMON_PATH)/tools/fw_meta.py create_fw \
		--manifest=$(FW_MANIFEST) \
		--src_dir=$(FW_DIR) \
		--output=$@

${OBJDIR}/mongoose.o: ${MONGOOSE_PATH}/mongoose.c
	@echo "  CC    $^"
	@${CC} ${CFLAGS} -DEXCLUDE_COMMON -D${COMPILER} -o ${@} ${<}

APP_OBJS = ${OBJDIR}/main.o \
           ${OBJDIR}/sys_config.o ${OBJDIR}/cc3200_config.o ${OBJDIR}/device_config.o ${OBJDIR}/sj_config.o \
           ${OBJDIR}/cc3200_fs.o ${OBJDIR}/cc3200_fs_spiffs.o ${OBJDIR}/cc3200_fs_spiffs_container.o ${OBJDIR}/cc3200_fs_failfs.o \
           ${OBJDIR}/cc3200_gpio.o \
           ${OBJDIR}/cc3200_libc.o \
           ${OBJDIR}/cc3200_sj_hal.o ${OBJDIR}/cc3200_socket.o ${OBJDIR}/cc3200_wifi.o \
           ${OBJDIR}/v7.o \
           ${OBJDIR}/sj_gpio_js.o ${OBJDIR}/sj_i2c_js.o ${OBJDIR}/cc3200_i2c.o \
           ${OBJDIR}/sj_wifi_js.o ${OBJDIR}/sj_prompt.o ${OBJDIR}/sj_http.o \
           ${OBJDIR}/sj_mongoose.o ${OBJDIR}/sj_mongoose_http_client.o \
           ${OBJDIR}/sj_timers.o ${OBJDIR}/sj_timers_mongoose.o \
           ${OBJDIR}/sj_v7_ext.o \
           ${OBJDIR}/sj_mqtt.o ${OBJDIR}/sj_mongoose_ws_client.o \
           ${OBJDIR}/device_config.o ${OBJDIR}/sys_config.o \
           ${OBJDIR}/spiffs_cache.o ${OBJDIR}/spiffs_check.o ${OBJDIR}/spiffs_gc.o ${OBJDIR}/spiffs_hydrogen.o ${OBJDIR}/spiffs_nucleus.o \
           ${OBJDIR}/mongoose.o \
           ${OBJDIR}/startup_gcc.o \
           ${OBJDIR}/timers.o ${OBJDIR}/list.o ${OBJDIR}/queue.o ${OBJDIR}/tasks.o ${OBJDIR}/port.o ${OBJDIR}/heap_3.o ${OBJDIR}/osi_freertos.o \
           ${OBJDIR}/socket.o ${OBJDIR}/wlan.o ${OBJDIR}/driver.o ${OBJDIR}/device.o ${OBJDIR}/netapp.o ${OBJDIR}/netcfg.o ${OBJDIR}/cc_pal.o ${OBJDIR}/fs.o \
           ${OBJDIR}/cpu.o ${OBJDIR}/i2c.o ${OBJDIR}/interrupt.o ${OBJDIR}/pin.o ${OBJDIR}/prcm.o ${OBJDIR}/spi.o ${OBJDIR}/uart.o ${OBJDIR}/udma.o ${OBJDIR}/utils.o

BUILD_INFO_O = $(patsubst %.c,%.o,$(BUILD_INFO_C))
SYS_CONFIG_O = $(patsubst %.c,%.o,$(SYS_CONFIG_C))

# Generate build info. Only regenerates if there are changes in objects.
${BUILD_INFO_C}: ${APP_OBJS}
	@echo "  GEN   $@"
	@$(COMMON_PATH)/tools/fw_meta.py gen_build_info \
		--c_output=$(BUILD_INFO_C) \
		--json_output=$(BUILD_INFO_JSON)

${BUILD_INFO_O}: ${BUILD_INFO_C}

${FW_ELF}: ${GENERATED_SOURCES} ${APP_OBJS} ${BUILD_INFO_O}

SCATTERgcc_${PROG} = ${PROG}.ld
ENTRY_${PROG} = ResetISR

${FS_IMG}: $(wildcard $(COMMON_FS_PATH)/*) $(JS_SRCS) $(wildcard $(FS_DIR)/*)
	@$(foreach js,$^, \
		echo "  CP    $(js) -> $(FS_BUILD_DIR)"; \
		cp $(js) $(FS_BUILD_DIR);)
	@echo "  MKFS  $@"
	@/usr/local/bin/mkspiffs $(FW_FS_SIZE) $(FS_BUILD_DIR) > $@

$(V7_PATH)/v7.c:
	make -C $(V7_PATH) v7.c

$(V7_PATH)/v7.h:
	make -C $(V7_PATH) v7.h

$(OBJDIR)/v7: $(GENERATED_SOURCES)
	@echo "  CC    $^"
	$(Q) gcc -DV7_EXE -DV7_EXPOSE_PRIVATE $(V7_PATH)/v7.c -lm -o $(BUILD_DIR)/v7

include $(REPO_PATH)/smartjs/src/sys_config.mk

# Target specific warning inhibitions

build/wlan.o: CFLAGS += $(DISABLED_SDK_WARNINGS)
build/driver.o: CFLAGS += $(DISABLED_SDK_WARNINGS)
build/fs.o: CFLAGS += $(DISABLED_SDK_WARNINGS)
build/spi.o: CFLAGS += $(DISABLED_SDK_WARNINGS)
build/prcm.o: CFLAGS += $(DISABLED_SDK_WARNINGS)
build/spiffs_hydrogen.o: CFLAGS += -Wno-unused-function
